+ WORLDMAP
Goals:
	+ Load tiles.
	+ Load textures.
	+ Maps are stored in a sharable format.
	+ Smooth moving camera.


LEVEL EDITOR
! now reference level_editor.txt
Goals:
	* Embedded inside of the main game. (Activate/Disable)
	* Saves tiles.
	* NEW Toolbox.
		* Place tiles.

ENTITIES
Goals:
	* LEVEL EDITOR may pause the "running" of these entities.
	* Load a player entity. Moves around, jumps.
		/ Plan a bunch (A BUNCH) of control schemes
		for Jerky and Jetz to play with

	* Load an NPC entity. Walks side to side, jumps.
		* Create a script which they may 'read' from.
		/ Plan commands

DYNAMIC CAMERA (2)
Goals:
	* Load & Save Camera Locks.
	! Camera Lock changes play nice with the Level Editor.



! copyright for font
! Public release has access to Level Editor.
****************************************
DEMO #2 RELEASE - "Public Level Editor"
****************************************


============================================

LEVEL EDITOR

Goals:
	/ Create a UI
	! Camera can't move too far off-screen.
	! Load/Save Maps, Textures, 'Level' tags.
	! Load/Save basic Entities.


/ UI DESIGN PLANS
! Make a plan for the design of the Level Editor
Tile, Camera, Entity model
	! zoom amt

CAMERA
! don't let the camera move too far out of boundaries

LOADING/SAVING
/! Load/Save entire Maps into the Level Editor
/ Python Windows Forms library for OpenGL (and tests)

! Loading/Saving Maps
! Loading/Saving Textures
! Loading/Saving 'Levels'
	! perform stress test (level loading)
	init and load all the rooms in a level, post-transition
	render if it is on-screen
	how many rooms is "too much" in terms of waiting?

ENTITIES
! Move and flash an entity when something is wrong with it



============================================


+ Created a LEVEL EDITOR.
-
~ Cleaned: moved controls to LevelEditor.
	~ Controls the Camera.
		+ Level Editor Camera snaps to Rooms
	~ Contains a background.

---


Create pop-up boxes.
+ text input box
	+ text input
		+ Work out the current key being pressed.
			~ Order the keys by value


	+ flickering cursor
		+ added cursor
			+ drawn every loop to match text bounds

	+ box is bounded
		+ box is wrapped around the text
		~ string can't exceed box length


+ made a UI box. (contains UI elements)
	+ top-level UI handling
		+ can set inputbox position
		+ when a child is added, set it's proportional pos 	
		+ when the UI is moved, move the contents, too

========

! button UI
	+ sfml_plus Mouse
		+ Mouse inherits from GameRectangle
		+ Mouse has held, pressed, released
			+ window reset

	+ sfml_plus.window (Window, Key, Mouse)

	! main: SmoothCamera dislikes moving back on an axis


Plan a UI.
-
! Work on some quick designs for the layout.
(explore loading/saving, tools and help)



