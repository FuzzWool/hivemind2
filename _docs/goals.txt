WORLDMAP
Goals:
	* Load tiles.
	* Load textures.
! check against aspect ratios (progress/window.txt)


LEVEL EDITOR
! now reference level_editor.txt
Goals:
	* Embedded inside of the main game. (Activate/Disable)
	* Saves tiles.
	* NEW Toolbox.
		* Place tiles.

DYNAMIC CAMERA (1)
Goals:
	* Zooms in and out (in a smooth gradient).
	* Pans smoothly from one position to another.

ENTITIES
Goals:
	* LEVEL EDITOR may pause the "running" of these entities.
	* Load a player entity. Moves around, jumps.
		/ Plan a bunch (A BUNCH) of control schemes
		for Jerky and Jetz to play with

	* Load an NPC entity. Walks side to side, jumps.
		* Create a script which they may 'read' from.
		/ Plan commands

DYNAMIC CAMERA (2)
Goals:
	* Load & Save Camera Locks.
	! Camera Lock changes play nice with the Level Editor.



! Public release has access to Level Editor.
****************************************
DEMO #2 RELEASE - "Public Level Editor"
****************************************



WORLDMAP
Goals:
	* Load tiles.
	* Load textures.
	* Maps are stored in a sharable format.

===PLANNING====
worldmap: every area in the entire game.
room: an individual 'screen' of the game
level: a "random" cluster of rooms, which have to be marked
==============


. wrote down docs
. created layout for WorldMap, Room and Tile

-----

~ grab GameRectangle

BASICS
simply fill tiles in each room
	+ init, load and render tiles in one room.
		+ init
		+ load
		+ render
			+ vertex_array > room.vertices (init_vertices)
			+ multiple rooms


! consistant ROOM_WIDTH and ROOM_HEIGHT

LOADING FILES
! load/save textures

LOADING MAPS
! try writing a folder in Python


LOADING WHEREABOUTS
! Basic Camera
	! move around the map
	! WorldMap rooms only draw within the camera

! perform stress test (level loading)
init and load all the rooms in a level, post-transition
render if it is on-screen
how many rooms is "too much" in terms of waiting?


next up...
! SAVING FILES
! SAVING MAPS